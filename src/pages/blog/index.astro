---
import '../../styles/global.css';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				max-width: 1200px;
				margin: 0 auto;
				padding: 2rem 1rem;
			}

			.blog-grid {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}

			.blog-card {
				display: flex;
				flex-direction: column;
				background: white;
				border-radius: 16px;
				overflow: hidden;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
				transition: all 0.3s ease;
				height: 100%;
			}

			.blog-card:hover {
				transform: translateY(-4px);
				box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
			}

			.card-image {
				position: relative;
				width: 100%;
				height: 200px;
				overflow: hidden;
			}

			.card-image img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: transform 0.3s ease;
			}

			.blog-card:hover .card-image img {
				transform: scale(1.05);
			}

			/* Gradient backgrounds for cards without images */
			.gradient-bg {
				width: 100%;
				height: 200px;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				position: relative;
			}

			.gradient-bg-1 {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			}

			.gradient-bg-2 {
				background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
			}

			.gradient-bg-3 {
				background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
			}

			.gradient-bg-4 {
				background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
			}

			.gradient-bg-5 {
				background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
			}

			.gradient-bg-6 {
				background: linear-gradient(135deg, #30cfd0 0%, #330867 100%);
			}

			.difficulty-badge {
				position: absolute;
				top: 1rem;
				right: 1rem;
				background: white;
				padding: 0.35rem 0.75rem;
				border-radius: 20px;
				font-size: 0.75rem;
				font-weight: 600;
				display: flex;
				align-items: center;
				gap: 0.35rem;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
			}

			.difficulty-badge::before {
				content: '‚≠ê';
				font-size: 0.875rem;
			}

			.difficulty-beginner {
				color: #10b981;
			}

			.difficulty-intermediate {
				color: #f59e0b;
			}

			.difficulty-advanced {
				color: #ef4444;
			}

			.bell-icon {
				position: absolute;
				top: 1rem;
				left: 1rem;
				color: white;
				font-size: 1.5rem;
				filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
			}

			.card-content {
				padding: 1.5rem;
				flex: 1;
				display: flex;
				flex-direction: column;
			}

			.category-tag {
				font-size: 0.75rem;
				font-weight: 600;
				text-transform: uppercase;
				letter-spacing: 0.5px;
				color: #6b7280;
				margin-bottom: 0.5rem;
				min-height: 1.125rem;
			}

			.card-title {
				font-size: 1.25rem;
				font-weight: 700;
				line-height: 1.4;
				margin: 0 0 0.75rem 0;
				color: #111827;
				min-height: 3.5rem;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}

			.card-description {
				font-size: 0.875rem;
				line-height: 1.6;
				color: #6b7280;
				margin: 0 0 1rem 0;
				min-height: 4rem;
				display: -webkit-box;
				-webkit-line-clamp: 3;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}

			.card-meta {
				display: flex;
				align-items: center;
				justify-content: space-between;
				margin-top: auto;
				padding-top: 1rem;
				border-top: 1px solid #e5e7eb;
			}

			.card-date {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 0.875rem;
				color: #9ca3af;
			}

			.card-date::before {
				content: 'üïí';
			}

			.read-more {
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 0.875rem;
				font-weight: 600;
				color: #667eea;
				text-decoration: none;
				transition: gap 0.3s ease;
			}

			.read-more::after {
				content: '‚Üí';
				transition: transform 0.3s ease;
			}

			.blog-card:hover .read-more {
				gap: 0.75rem;
			}

			.blog-card:hover .read-more::after {
				transform: translateX(4px);
			}

			.tags-container {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-bottom: 0.75rem;
				min-height: 2rem;
			}

			.tag {
				font-size: 0.75rem;
				padding: 0.25rem 0.625rem;
				background: #f3f4f6;
				color: #4b5563;
				border-radius: 12px;
				font-weight: 500;
			}

			@media (max-width: 768px) {
				.blog-grid {
					grid-template-columns: 1fr;
					gap: 1.5rem;
				}

				main {
					padding: 1rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<ul class="blog-grid">
					{
						posts.map((post, index) => {
							const gradientClass = `gradient-bg-${(index % 6) + 1}`;
							const difficultyText = post.data.difficulty
								? post.data.difficulty.charAt(0).toUpperCase() + post.data.difficulty.slice(1)
								: 'Beginner';

							return (
								<li>
									<article class="blog-card">
										<div class="card-image">
											{post.data.heroImage ? (
												<img src={post.data.heroImage} alt={post.data.title} />
											) : (
												<div class={`gradient-bg ${gradientClass}`}>
													<span class="bell-icon">üîî</span>
													<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: white;">
														<h3 style="font-size: 1.5rem; font-weight: 700; margin: 0;">Build the web</h3>
														<h3 style="font-size: 1.5rem; font-weight: 700; margin: 0;">you want</h3>
													</div>
												</div>
											)}
											{post.data.difficulty && (
												<span class={`difficulty-badge difficulty-${post.data.difficulty}`}>
													{difficultyText}
												</span>
											)}
										</div>
										<div class="card-content">
											{post.data.category && (
												<div class="category-tag">{post.data.category}</div>
											)}
											<h2 class="card-title">{post.data.title}</h2>
											<p class="card-description">{post.data.description}</p>
											{post.data.tags && post.data.tags.length > 0 && (
												<div class="tags-container">
													{post.data.tags.slice(0, 3).map((tag) => (
														<span class="tag">#{tag}</span>
													))}
												</div>
											)}
											<div class="card-meta">
												<span class="card-date">
													<FormattedDate date={post.data.pubDate} />
												</span>
												<a href={`/blog/${post.id}/`} class="read-more">
													Read more
												</a>
											</div>
										</div>
									</article>
								</li>
							);
						})
					}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>
