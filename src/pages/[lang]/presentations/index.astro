---
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import '../../../styles/global.css';

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'id' } }
  ];
}

const { lang } = Astro.params;

// Load presentation JSON files directly
const enPresentationsRaw = import.meta.glob('/src/content/presentations-en/*.json', { eager: true });
const idPresentationsRaw = import.meta.glob('/src/content/presentations-id/*.json', { eager: true });

const presentationsRaw = lang === 'en' ? enPresentationsRaw : idPresentationsRaw;

// Transform to array with id and data
let presentations: any[] = [];
for (const [path, module] of Object.entries(presentationsRaw)) {
  const id = path.split('/').pop()?.replace('.json', '') || '';
  presentations.push({
    id,
    data: module as any
  });
}

// Sort by date, newest first
presentations.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

const title = lang === 'en' ? 'Interactive Presentations' : 'Presentasi Interaktif';
const description = lang === 'en'
  ? 'Learn visually with our interactive presentations'
  : 'Belajar secara visual dengan presentasi interaktif kami';
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} - QuiverLearn</title>
    <meta name="description" content={description} />
  </head>
  <body>
    <Header />
    <main class="max-w-7xl mx-auto px-4 py-12">
      <div class="text-center mb-12">
        <h1 class="text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          {title}
        </h1>
        <p class="text-xl text-gray-600">
          {description}
        </p>
      </div>

      {presentations.length === 0 ? (
        <div class="text-center py-20">
          <div class="text-6xl mb-4">ðŸ“Š</div>
          <p class="text-2xl text-gray-600 mb-2">
            {lang === 'en' ? 'No presentations available yet' : 'Belum ada presentasi tersedia'}
          </p>
          <p class="text-gray-500">
            {lang === 'en' ? 'Check back soon for new content!' : 'Periksa kembali segera untuk konten baru!'}
          </p>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {presentations.map((presentation) => (
            <a
              href={`/${lang}/presentations/${presentation.id}`}
              class="group bg-white rounded-lg shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden transform hover:-translate-y-1"
            >
              <div class="bg-gradient-to-br from-blue-500 to-purple-600 p-8 text-white">
                <div class="text-4xl mb-3">ðŸ“Š</div>
                <h2 class="text-2xl font-bold group-hover:underline">
                  {presentation.data.title}
                </h2>
              </div>

              <div class="p-6">
                <p class="text-gray-600 mb-4 line-clamp-3">
                  {presentation.data.description}
                </p>

                <div class="flex flex-wrap gap-2 mb-4">
                  {presentation.data.tags?.slice(0, 3).map((tag: string) => (
                    <span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                      {tag}
                    </span>
                  ))}
                </div>

                <div class="flex items-center justify-between text-sm text-gray-500 border-t pt-4">
                  <div class="flex items-center gap-4">
                    <span class="flex items-center gap-1">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                      </svg>
                      {presentation.data.estimatedTime} min
                    </span>
                    <span class="flex items-center gap-1">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                      </svg>
                      {presentation.data.totalSlides} slides
                    </span>
                  </div>

                  <span class={`
                    px-2 py-1 rounded text-xs font-semibold
                    ${presentation.data.difficulty === 'beginner' ? 'bg-green-100 text-green-700' : ''}
                    ${presentation.data.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-700' : ''}
                    ${presentation.data.difficulty === 'advanced' ? 'bg-red-100 text-red-700' : ''}
                  `}>
                    {presentation.data.difficulty}
                  </span>
                </div>

                {presentation.data.relatedBlogPost && (
                  <div class="mt-3 pt-3 border-t">
                    <span class="text-xs text-gray-500 flex items-center gap-1">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                      </svg>
                      {lang === 'en' ? 'Blog post available' : 'Artikel blog tersedia'}
                    </span>
                  </div>
                )}
              </div>
            </a>
          ))}
        </div>
      )}
    </main>
    <Footer />
  </body>
</html>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
