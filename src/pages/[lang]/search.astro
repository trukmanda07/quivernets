---
import '../../styles/global.css';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import { supportedLanguages, useTranslations } from '../../utils/i18n';
import Tag from '../../components/Tag.astro';
import FormattedDate from '../../components/FormattedDate.astro';

export async function getStaticPaths() {
	return supportedLanguages.map((lang) => ({
		params: { lang },
	}));
}

const { lang } = Astro.params;
const currentLang = lang || 'en';
const t = useTranslations(currentLang);

// Get search query from URL
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('q') || '';
---

<!doctype html>
<html lang={currentLang}>
	<head>
		<BaseHead
			title={`${t.search.results} - ${SITE_TITLE}`}
			description={SITE_DESCRIPTION}
		/>
		<style>
			main {
				width: 960px;
			}

			.search-page-header {
				margin-bottom: 2rem;
			}

			.search-page-header h1 {
				color: rgb(var(--black));
				margin-bottom: 0.5rem;
			}

			.search-input-container {
				background: white;
				border: 2px solid rgb(var(--gray));
				border-radius: 8px;
				padding: 1rem;
				display: flex;
				align-items: center;
				gap: 0.75rem;
				transition: border-color 0.2s ease;
			}

			.search-input-container:focus-within {
				border-color: rgb(var(--accent));
			}

			.search-icon {
				color: rgb(var(--gray));
				flex-shrink: 0;
			}

			.search-input {
				flex: 1;
				border: none;
				outline: none;
				font-size: 1.125rem;
				color: rgb(var(--black));
				background: transparent;
			}

			.search-input::placeholder {
				color: rgb(var(--gray));
			}

			.search-stats {
				margin-top: 1rem;
				color: rgb(var(--gray-dark));
				font-size: 0.875rem;
			}

			.results-container {
				margin-top: 2rem;
			}

			.result-item {
				padding: 1.5rem;
				background: white;
				border: 1px solid rgb(var(--gray-light));
				border-radius: 8px;
				margin-bottom: 1rem;
				transition: all 0.2s ease;
				text-decoration: none;
				display: block;
				color: inherit;
			}

			.result-item:hover {
				border-color: rgb(var(--accent));
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
				transform: translateY(-2px);
			}

			.result-title {
				font-size: 1.5rem;
				font-weight: 600;
				color: rgb(var(--accent));
				margin-bottom: 0.5rem;
			}

			.result-description {
				color: rgb(var(--gray-dark));
				margin-bottom: 0.75rem;
				line-height: 1.6;
			}

			.result-meta {
				display: flex;
				gap: 1rem;
				align-items: center;
				font-size: 0.875rem;
				color: rgb(var(--gray));
				flex-wrap: wrap;
			}

			.result-tags {
				display: flex;
				gap: 0.5rem;
				flex-wrap: wrap;
			}

			.no-results {
				text-align: center;
				padding: 4rem 2rem;
			}

			.no-results h2 {
				color: rgb(var(--gray-dark));
				margin-bottom: 1rem;
			}

			.no-results p {
				color: rgb(var(--gray));
			}

			.loading {
				text-align: center;
				padding: 4rem 2rem;
				color: rgb(var(--gray));
			}

			.spinner {
				border: 3px solid rgb(var(--gray-light));
				border-top: 3px solid rgb(var(--accent));
				border-radius: 50%;
				width: 40px;
				height: 40px;
				animation: spin 1s linear infinite;
				margin: 0 auto 1rem;
			}

			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}

			@media (max-width: 720px) {
				main {
					padding: 1rem;
				}

				.result-item {
					padding: 1rem;
				}

				.result-title {
					font-size: 1.25rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="search-page-header">
				<h1>{t.search.results}</h1>
				<div class="search-input-container">
					<svg
						class="search-icon"
						xmlns="http://www.w3.org/2000/svg"
						width="20"
						height="20"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
					>
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.3-4.3"></path>
					</svg>
					<input
						type="search"
						id="search-input"
						class="search-input"
						placeholder={t.search.placeholder}
						value={searchQuery}
						autofocus
					/>
				</div>
				<div class="search-stats" id="search-stats">
					{searchQuery ? `${t.search.searching}...` : t.search.searchPosts}
				</div>
			</div>

			<div class="results-container" id="results-container">
				{searchQuery ? (
					<div class="loading">
						<div class="spinner"></div>
						<p>{t.search.searching}</p>
					</div>
				) : (
					<div class="no-results">
						<h2>{t.search.searchPosts}</h2>
						<p>Enter a search query to find posts</p>
					</div>
				)}
			</div>
		</main>
		<Footer />

		<script>
			import Fuse from 'fuse.js';
			import type { SearchablePost } from '../../utils/search';
			import { createSearchIndex, searchPosts } from '../../utils/search';

			const currentLang = document.documentElement.lang as 'en' | 'id';
			let searchIndex: Fuse<SearchablePost> | null = null;

			const searchInput = document.getElementById('search-input') as HTMLInputElement;
			const searchStats = document.getElementById('search-stats');
			const resultsContainer = document.getElementById('results-container');

			// Load search index
			async function loadSearchIndex() {
				try {
					const response = await fetch(`/search-index-${currentLang}.json`);
					if (!response.ok) throw new Error('Failed to load search index');

					const posts: SearchablePost[] = await response.json();
					searchIndex = createSearchIndex(posts);

					// If there's an initial query, search immediately
					if (searchInput?.value) {
						performSearch(searchInput.value);
					}
				} catch (error) {
					console.error('Error loading search index:', error);
					if (resultsContainer) {
						resultsContainer.innerHTML = `
							<div class="no-results">
								<h2>Error loading search index</h2>
								<p>Please try refreshing the page</p>
							</div>
						`;
					}
				}
			}

			// Perform search
			function performSearch(query: string) {
				if (!resultsContainer || !searchStats) return;

				if (!query || query.trim().length < 2) {
					resultsContainer.innerHTML = `
						<div class="no-results">
							<h2>Start typing to search</h2>
							<p>Enter at least 2 characters to search</p>
						</div>
					`;
					searchStats.textContent = 'Enter a search query';
					return;
				}

				if (!searchIndex) {
					resultsContainer.innerHTML = `
						<div class="loading">
							<div class="spinner"></div>
							<p>Loading search index...</p>
						</div>
					`;
					return;
				}

				const results = searchPosts(searchIndex, query, 50);

				// Update URL without reload
				const url = new URL(window.location.href);
				url.searchParams.set('q', query);
				window.history.replaceState({}, '', url.toString());

				// Update stats
				const translations = {
					en: {
						found: `Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"`,
						noResults: 'No results found'
					},
					id: {
						found: `Ditemukan ${results.length} hasil untuk "${query}"`,
						noResults: 'Tidak ada hasil ditemukan'
					}
				};

				const t = translations[currentLang as 'en' | 'id'];

				searchStats.textContent = results.length > 0 ? t.found : t.noResults;

				if (results.length === 0) {
					resultsContainer.innerHTML = `
						<div class="no-results">
							<h2>${t.noResults}</h2>
							<p>Try different keywords or check your spelling</p>
						</div>
					`;
					return;
				}

				// Render results
				const resultsHTML = results
					.map((result) => {
						const post = result.item;
						const date = new Date(post.pubDate).toLocaleDateString(
							currentLang === 'id' ? 'id-ID' : 'en-US',
							{ year: 'numeric', month: 'long', day: 'numeric' }
						);

						const tags = post.tags
							?.slice(0, 3)
							.map(tag => `<span class="tag" style="background: rgb(var(--gray-light)); padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem;">${tag}</span>`)
							.join('') || '';

						return `
							<a href="/${currentLang}/blog/${post.slug}/" class="result-item">
								<h2 class="result-title">${post.title}</h2>
								<p class="result-description">${post.description}</p>
								<div class="result-meta">
									<span>${date}</span>
									${post.category ? `<span>• ${post.category}</span>` : ''}
									${post.difficulty ? `<span>• ${post.difficulty}</span>` : ''}
									${tags ? `<div class="result-tags">${tags}</div>` : ''}
								</div>
							</a>
						`;
					})
					.join('');

				resultsContainer.innerHTML = resultsHTML;
			}

			// Search input handler with debounce
			let searchTimeout: number;
			searchInput?.addEventListener('input', (e) => {
				clearTimeout(searchTimeout);
				const query = (e.target as HTMLInputElement).value;

				searchTimeout = window.setTimeout(() => {
					performSearch(query);
				}, 300);
			});

			// Load index on page load
			loadSearchIndex();
		</script>
	</body>
</html>
