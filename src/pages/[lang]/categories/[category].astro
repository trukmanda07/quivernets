---
/**
 * Category Filter Page
 * Shows all posts in a specific category
 * Dynamic route: /[lang]/categories/[category]
 */

import '../../../styles/global.css';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../../../components/BaseHead.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import Footer from '../../../components/Footer.astro';
import FormattedDate from '../../../components/FormattedDate.astro';
import Header from '../../../components/Header.astro';
import Tag from '../../../components/Tag.astro';
import { SITE_TITLE } from '../../../consts';
import { supportedLanguages, getCollectionName, useTranslations } from '../../../utils/i18n';

export async function getStaticPaths() {
	const paths = [];

	// Generate paths for each language
	for (const lang of supportedLanguages) {
		const collectionName = getCollectionName(lang);
		let posts = [];

		try {
			posts = await getCollection(collectionName);
		} catch (error) {
			console.log(`Collection ${collectionName} not found or empty, skipping...`);
			continue;
		}

		// Collect all unique categories from posts
		const categories = new Set<string>();
		posts.forEach((post) => {
			if (post.data.category) {
				categories.add(post.data.category);
			}
		});

		// Create a path for each category
		categories.forEach((category) => {
			const categorySlug = category.toLowerCase().replace(/\s+/g, '-');
			paths.push({
				params: { lang, category: categorySlug },
				props: { originalCategory: category },
			});
		});
	}

	return paths;
}

const { lang, category: categorySlug } = Astro.params;
const { originalCategory } = Astro.props;
const currentLang = lang || 'en';
const t = useTranslations(currentLang);

// Get all posts for the current language with this category
const collectionName = getCollectionName(currentLang);
let allPosts = [];

try {
	allPosts = await getCollection(collectionName);
} catch (error) {
	console.error(`Error loading posts for category ${categorySlug}:`, error);
}

// Filter posts by category (case-insensitive match)
let posts = allPosts
	.filter((post) => {
		if (!post.data.category) return false;
		return post.data.category.toLowerCase().replace(/\s+/g, '-') === categorySlug;
	})
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get difficulty breakdown
const difficultyCount = {
	beginner: posts.filter(p => p.data.difficulty === 'beginner').length,
	intermediate: posts.filter(p => p.data.difficulty === 'intermediate').length,
	advanced: posts.filter(p => p.data.difficulty === 'advanced').length,
};

// Get all tags in this category
const allTags = [...new Set(posts.flatMap(p => p.data.tags || []))].sort();

const pageTitle = originalCategory;
const pageDescription = `${posts.length} ${posts.length === 1 ? (currentLang === 'en' ? 'post' : 'artikel') : (currentLang === 'en' ? 'posts' : 'artikel')} ${currentLang === 'en' ? 'in' : 'dalam'} ${originalCategory}`;

// Breadcrumb segments
const breadcrumbSegments = [
	{ label: t.nav.home, url: `/${currentLang}/` },
	{ label: t.nav.blog, url: `/${currentLang}/blog/` },
	{ label: currentLang === 'en' ? 'Categories' : 'Kategori', url: undefined },
	{ label: originalCategory, url: undefined }
];
---

<!doctype html>
<html lang={currentLang}>
	<head>
		<BaseHead title={`${pageTitle} | ${SITE_TITLE}`} description={pageDescription} />
		<style>
			main {
				width: 960px;
			}
			.page-header {
				margin-bottom: 2rem;
			}
			.page-header h1 {
				color: rgb(var(--black));
				margin-bottom: 0.75rem;
			}
			.category-meta {
				display: flex;
				gap: 2rem;
				flex-wrap: wrap;
				color: rgb(var(--gray-dark));
			}
			.meta-item {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}
			.difficulty-breakdown {
				background: rgb(var(--gray-light));
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 2rem;
			}
			.difficulty-breakdown h3 {
				margin: 0 0 0.75rem 0;
				font-size: 0.875rem;
				color: rgb(var(--gray-dark));
			}
			.difficulty-stats {
				display: flex;
				gap: 1rem;
				flex-wrap: wrap;
			}
			.difficulty-stat {
				padding: 0.5rem 1rem;
				background: white;
				border-radius: 4px;
				font-size: 0.875rem;
			}
			.difficulty-stat strong {
				color: rgb(var(--accent));
			}
			.tags-section {
				margin-bottom: 2rem;
			}
			.tags-section h3 {
				margin: 0 0 0.75rem 0;
				font-size: 0.875rem;
				color: rgb(var(--gray-dark));
			}
			.tags-list {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
				width: 100%;
			}
			ul li a {
				display: block;
			}
			.post-card {
				height: 100%;
				display: flex;
				flex-direction: column;
			}
			.post-info {
				flex: 1;
			}
			.title {
				margin: 0.5rem 0;
				color: rgb(var(--black));
				line-height: 1.2;
				font-size: 1.25rem;
			}
			.description {
				margin: 0.5rem 0;
				color: rgb(var(--gray-dark));
				font-size: 0.9rem;
			}
			.date {
				margin: 0.5rem 0;
				color: rgb(var(--gray));
				font-size: 0.875rem;
			}
			.post-tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-top: 0.75rem;
			}
			.post-difficulty {
				display: inline-block;
				padding: 0.25rem 0.75rem;
				background: rgb(var(--gray-light));
				border-radius: 12px;
				font-size: 0.75rem;
				margin-top: 0.5rem;
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul a:hover img {
				box-shadow: var(--box-shadow);
			}
			.empty-state {
				text-align: center;
				padding: 4rem 2rem;
			}
			.empty-state h2 {
				color: rgb(var(--gray));
				margin-bottom: 1rem;
			}
			.back-link {
				display: inline-block;
				margin-top: 2rem;
				color: rgb(var(--accent));
				text-decoration: none;
			}
			.back-link:hover {
				text-decoration: underline;
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<!-- Breadcrumb Navigation -->
			<Breadcrumb segments={breadcrumbSegments} />

			<!-- Page Header -->
			<div class="page-header">
				<h1>{pageTitle}</h1>
				<div class="category-meta">
					<div class="meta-item">
						<span>{posts.length} {posts.length === 1 ? (currentLang === 'en' ? 'post' : 'artikel') : (currentLang === 'en' ? 'posts' : 'artikel')}</span>
					</div>
				</div>
			</div>

			<!-- Difficulty Breakdown -->
			{(difficultyCount.beginner > 0 || difficultyCount.intermediate > 0 || difficultyCount.advanced > 0) && (
				<div class="difficulty-breakdown">
					<h3>{t.filters.difficulty}</h3>
					<div class="difficulty-stats">
						{difficultyCount.beginner > 0 && (
							<div class="difficulty-stat">
								<strong>{difficultyCount.beginner}</strong> {t.difficulty.beginner}
							</div>
						)}
						{difficultyCount.intermediate > 0 && (
							<div class="difficulty-stat">
								<strong>{difficultyCount.intermediate}</strong> {t.difficulty.intermediate}
							</div>
						)}
						{difficultyCount.advanced > 0 && (
							<div class="difficulty-stat">
								<strong>{difficultyCount.advanced}</strong> {t.difficulty.advanced}
							</div>
						)}
					</div>
				</div>
			)}

			<!-- Related Tags -->
			{allTags.length > 0 && (
				<div class="tags-section">
					<h3>{currentLang === 'en' ? 'Topics in this category' : 'Topik dalam kategori ini'}</h3>
					<div class="tags-list">
						{allTags.map(tag => (
							<Tag tag={tag} lang={currentLang} size="sm" />
						))}
					</div>
				</div>
			)}

			<!-- Posts List -->
			<section>
				{posts.length > 0 ? (
					<ul>
						{posts.map((post) => (
							<li>
								<a href={`/${currentLang}/blog/${post.id}/`}>
									<div class="post-card">
										{post.data.heroImage && (
											<Image width={720} height={360} src={post.data.heroImage} alt="" />
										)}
										<div class="post-info">
											<h4 class="title">{post.data.title}</h4>
											<p class="description">{post.data.description}</p>
											<p class="date">
												<FormattedDate date={post.data.pubDate} />
											</p>
											<div class="post-difficulty">
												{t.difficulty[post.data.difficulty]}
											</div>
											{post.data.tags && post.data.tags.length > 0 && (
												<div class="post-tags">
													{post.data.tags.map((tag) => (
														<Tag tag={tag} lang={currentLang} size="sm" variant="outlined" />
													))}
												</div>
											)}
										</div>
									</div>
								</a>
							</li>
						))}
					</ul>
				) : (
					<div class="empty-state">
						<h2>{currentLang === 'en' ? 'No posts found' : 'Tidak ada artikel ditemukan'}</h2>
						<p>{currentLang === 'en' ? `No posts in the "${originalCategory}" category yet.` : `Belum ada artikel dalam kategori "${originalCategory}".`}</p>
					</div>
				)}
			</section>

			<!-- Back to blog link -->
			<a href={`/${currentLang}/blog/`} class="back-link">
				‚Üê {currentLang === 'en' ? 'Back to all posts' : 'Kembali ke semua artikel'}
			</a>
		</main>
		<Footer />
	</body>
</html>
