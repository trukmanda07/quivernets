---
/**
 * Inline Search Component
 * Always-visible search bar at the top of blog content
 * Features real-time search with dropdown results and quick filters
 */

import type { Language } from '../i18n';
import { useTranslations } from '../utils/i18n';

interface Props {
	lang: Language;
	categories?: string[];
	placeholder?: string;
	showQuickFilters?: boolean;
}

const {
	lang,
	categories = [],
	placeholder,
	showQuickFilters = true
} = Astro.props;

const t = useTranslations(lang);
const defaultPlaceholder = placeholder || (lang === 'en' ? 'Search in "Blog Posts"...' : 'Cari di "Artikel Blog"...');
---

<div class="inline-search-container">
	<!-- Main Search Input -->
	<div class="search-input-wrapper">
		<svg
			class="search-icon"
			xmlns="http://www.w3.org/2000/svg"
			width="20"
			height="20"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
		>
			<circle cx="11" cy="11" r="8"></circle>
			<path d="m21 21-4.3-4.3"></path>
		</svg>
		<input
			type="search"
			id="inline-search-input"
			class="inline-search-input"
			placeholder={defaultPlaceholder}
			aria-label="Search posts"
			autocomplete="off"
			spellcheck="false"
		/>
		<button
			id="inline-search-clear"
			class="clear-button"
			aria-label="Clear search"
			style="display: none;"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="18"
				height="18"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<circle cx="12" cy="12" r="10"></circle>
				<line x1="15" y1="9" x2="9" y2="15"></line>
				<line x1="9" y1="9" x2="15" y2="15"></line>
			</svg>
		</button>
	</div>

	<!-- Quick Filters -->
	{showQuickFilters && categories.length > 0 && (
		<div class="quick-filters">
			<button class="filter-chip active" data-category="all">
				{lang === 'en' ? 'All' : 'Semua'}
			</button>
			{categories.map((category) => (
				<button class="filter-chip" data-category={category}>
					{category}
				</button>
			))}
		</div>
	)}

	<!-- Search Results Dropdown -->
	<div id="search-results-dropdown" class="search-results-dropdown" hidden>
		<div class="results-header">
			<span class="results-count">0 results</span>
			<button class="close-results" aria-label="Close results">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="16"
					height="16"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
				>
					<line x1="18" y1="6" x2="6" y2="18"></line>
					<line x1="6" y1="6" x2="18" y2="18"></line>
				</svg>
			</button>
		</div>
		<div id="search-results-list" class="search-results-list">
			<!-- Results will be inserted here dynamically -->
		</div>
	</div>
</div>

<script>
	import Fuse from 'fuse.js';
	import type { SearchablePost } from '../utils/search';
	import { createSearchIndex, searchPosts } from '../utils/search';

	const currentLang = document.documentElement.lang as 'en' | 'id';
	let searchIndex: Fuse<SearchablePost> | null = null;
	let isIndexLoaded = false;
	let selectedCategory = 'all';

	// DOM elements
	const searchInput = document.getElementById('inline-search-input') as HTMLInputElement;
	const clearButton = document.getElementById('inline-search-clear');
	const resultsDropdown = document.getElementById('search-results-dropdown');
	const resultsList = document.getElementById('search-results-list');
	const resultsHeader = resultsDropdown?.querySelector('.results-count');
	const closeResultsBtn = resultsDropdown?.querySelector('.close-results');
	const filterChips = document.querySelectorAll('.filter-chip');

	// Load search index
	async function loadSearchIndex() {
		if (isIndexLoaded) return;

		try {
			const response = await fetch(`/search-index-${currentLang}.json`);
			if (!response.ok) throw new Error('Failed to load search index');

			const posts: SearchablePost[] = await response.json();
			searchIndex = createSearchIndex(posts);
			isIndexLoaded = true;
		} catch (error) {
			console.error('Error loading search index:', error);
		}
	}

	// Show/hide results dropdown
	function showResults() {
		if (resultsDropdown) {
			resultsDropdown.hidden = false;
		}
	}

	function hideResults() {
		if (resultsDropdown) {
			resultsDropdown.hidden = true;
		}
	}

	// Update results count
	function updateResultsCount(count: number) {
		if (resultsHeader) {
			const text = currentLang === 'en'
				? `${count} result${count !== 1 ? 's' : ''}`
				: `${count} hasil`;
			resultsHeader.textContent = text;
		}
	}

	// Perform search
	function performSearch(query: string) {
		if (!resultsList || !searchIndex) return;

		// Show loading state
		resultsList.innerHTML = '<div class="search-loading">Searching...</div>';
		showResults();

		// Minimum query length
		if (!query || query.trim().length < 2) {
			hideResults();
			return;
		}

		// Search with Fuse.js
		let results = searchPosts(searchIndex, query, 20);

		// Filter by selected category
		if (selectedCategory !== 'all') {
			results = results.filter(result =>
				result.item.category?.toLowerCase() === selectedCategory.toLowerCase()
			);
		}

		updateResultsCount(results.length);

		// Display results
		if (results.length === 0) {
			resultsList.innerHTML = `
				<div class="no-results">
					<svg class="no-results-icon" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.3-4.3"></path>
					</svg>
					<p class="no-results-title">${currentLang === 'en' ? 'No results found' : 'Tidak ada hasil'}</p>
					<p class="no-results-text">${currentLang === 'en' ? 'Try different keywords or check your spelling' : 'Coba kata kunci lain'}</p>
				</div>
			`;
			return;
		}

		const resultsHTML = results
			.map((result) => {
				const post = result.item;
				const tags = post.tags?.slice(0, 3)
					.map(tag => `<span class="result-tag">#${tag}</span>`)
					.join('') || '';

				return `
					<a href="/${currentLang}/blog/${post.slug}/" class="search-result-item">
						<div class="result-content">
							<h4 class="result-title">${highlightMatch(post.title, query)}</h4>
							<p class="result-description">${truncate(post.description, 120)}</p>
							<div class="result-meta">
								${post.category ? `<span class="result-category">${post.category}</span>` : ''}
								${tags}
							</div>
						</div>
					</a>
				`;
			})
			.join('');

		resultsList.innerHTML = resultsHTML;
	}

	// Highlight matching text
	function highlightMatch(text: string, query: string): string {
		const regex = new RegExp(`(${query})`, 'gi');
		return text.replace(regex, '<mark>$1</mark>');
	}

	// Truncate text
	function truncate(text: string, length: number): string {
		if (text.length <= length) return text;
		return text.substring(0, length) + '...';
	}

	// Event listeners
	let searchTimeout: number;
	searchInput?.addEventListener('input', (e) => {
		const value = (e.target as HTMLInputElement).value;

		// Show/hide clear button
		if (clearButton) {
			clearButton.style.display = value ? 'flex' : 'none';
		}

		// Debounce search
		clearTimeout(searchTimeout);
		searchTimeout = window.setTimeout(() => {
			if (!isIndexLoaded) {
				loadSearchIndex().then(() => performSearch(value));
			} else {
				performSearch(value);
			}
		}, 300);
	});

	// Clear search
	clearButton?.addEventListener('click', () => {
		if (searchInput) {
			searchInput.value = '';
			searchInput.focus();
		}
		if (clearButton) {
			clearButton.style.display = 'none';
		}
		hideResults();
	});

	// Close results
	closeResultsBtn?.addEventListener('click', () => {
		hideResults();
	});

	// Quick filter chips
	filterChips.forEach((chip) => {
		chip.addEventListener('click', () => {
			// Update active state
			filterChips.forEach(c => c.classList.remove('active'));
			chip.classList.add('active');

			// Get selected category
			selectedCategory = chip.getAttribute('data-category') || 'all';

			// Re-run search if there's a query
			if (searchInput && searchInput.value.trim().length >= 2) {
				performSearch(searchInput.value);
			}
		});
	});

	// Close dropdown when clicking outside
	document.addEventListener('click', (e) => {
		const target = e.target as HTMLElement;
		if (!target.closest('.inline-search-container')) {
			hideResults();
		}
	});

	// Keyboard shortcuts
	searchInput?.addEventListener('keydown', (e) => {
		if (e.key === 'Escape') {
			hideResults();
			searchInput.blur();
		}
	});

	// Preload search index on hover
	searchInput?.addEventListener('mouseenter', () => {
		if (!isIndexLoaded) {
			loadSearchIndex();
		}
	}, { once: true });

	// Focus on '/' key
	document.addEventListener('keydown', (e) => {
		if (e.key === '/' && document.activeElement !== searchInput) {
			e.preventDefault();
			searchInput?.focus();
		}
	});
</script>

<style>
	.inline-search-container {
		position: relative;
		width: 100%;
		margin-bottom: 2rem;
	}

	/* Search Input */
	.search-input-wrapper {
		position: relative;
		display: flex;
		align-items: center;
	}

	.inline-search-input {
		width: 100%;
		padding: 1rem 3rem 1rem 3.5rem;
		font-size: 1rem;
		color: rgb(var(--black));
		background: white;
		border: 2px solid rgb(203, 213, 225);
		border-radius: 12px;
		transition: all 0.2s ease;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
	}

	.inline-search-input:focus {
		outline: none;
		border-color: rgb(var(--accent));
		box-shadow: 0 0 0 4px rgba(var(--accent-rgb), 0.1), 0 4px 6px rgba(0, 0, 0, 0.05);
	}

	.inline-search-input::placeholder {
		color: rgb(148, 163, 184);
	}

	.search-icon {
		position: absolute;
		left: 1.25rem;
		color: rgb(148, 163, 184);
		pointer-events: none;
	}

	.clear-button {
		position: absolute;
		right: 1rem;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.375rem;
		background: rgb(241, 245, 249);
		border: none;
		border-radius: 6px;
		color: rgb(100, 116, 139);
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.clear-button:hover {
		background: rgb(226, 232, 240);
		color: rgb(51, 65, 85);
	}

	/* Quick Filters */
	.quick-filters {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-top: 1rem;
	}

	.filter-chip {
		padding: 0.5rem 1rem;
		font-size: 0.875rem;
		font-weight: 500;
		color: rgb(71, 85, 105);
		background: white;
		border: 2px solid rgb(226, 232, 240);
		border-radius: 20px;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.filter-chip:hover {
		border-color: rgb(var(--accent));
		color: rgb(var(--accent));
		transform: translateY(-1px);
	}

	.filter-chip.active {
		background: rgb(var(--accent));
		border-color: rgb(var(--accent));
		color: white;
	}

	/* Search Results Dropdown */
	.search-results-dropdown {
		position: absolute;
		top: calc(100% + 0.5rem);
		left: 0;
		right: 0;
		background: white;
		border: 1px solid rgb(226, 232, 240);
		border-radius: 12px;
		box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
		max-height: 70vh;
		overflow: hidden;
		z-index: 100;
		animation: slideDown 0.2s ease-out;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.results-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.75rem 1rem;
		background: rgb(249, 250, 251);
		border-bottom: 1px solid rgb(229, 231, 235);
	}

	.results-count {
		font-size: 0.875rem;
		font-weight: 600;
		color: rgb(71, 85, 105);
	}

	.close-results {
		padding: 0.25rem;
		background: none;
		border: none;
		color: rgb(100, 116, 139);
		cursor: pointer;
		border-radius: 4px;
		transition: all 0.2s ease;
	}

	.close-results:hover {
		background: rgb(226, 232, 240);
		color: rgb(51, 65, 85);
	}

	.search-results-list {
		overflow-y: auto;
		max-height: calc(70vh - 50px);
	}

	/* Custom scrollbar */
	.search-results-list::-webkit-scrollbar {
		width: 8px;
	}

	.search-results-list::-webkit-scrollbar-track {
		background: rgb(249, 250, 251);
	}

	.search-results-list::-webkit-scrollbar-thumb {
		background: rgb(203, 213, 225);
		border-radius: 4px;
	}

	.search-results-list::-webkit-scrollbar-thumb:hover {
		background: rgb(148, 163, 184);
	}

	/* Search Result Item */
	.search-result-item {
		display: block;
		padding: 1rem 1.25rem;
		text-decoration: none;
		border-bottom: 1px solid rgb(243, 244, 246);
		transition: all 0.15s ease;
	}

	.search-result-item:hover {
		background: rgb(249, 250, 251);
	}

	.search-result-item:last-child {
		border-bottom: none;
	}

	.result-title {
		font-size: 1rem;
		font-weight: 600;
		color: rgb(var(--black));
		margin: 0 0 0.375rem 0;
		line-height: 1.4;
	}

	.result-title mark {
		background: rgba(var(--accent-rgb), 0.2);
		color: rgb(var(--accent));
		padding: 0 0.125rem;
		border-radius: 2px;
	}

	.result-description {
		font-size: 0.875rem;
		color: rgb(100, 116, 139);
		margin: 0 0 0.5rem 0;
		line-height: 1.5;
	}

	.result-meta {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		align-items: center;
	}

	.result-category {
		padding: 0.25rem 0.625rem;
		font-size: 0.75rem;
		font-weight: 600;
		color: rgb(var(--accent));
		background: rgba(var(--accent-rgb), 0.1);
		border-radius: 4px;
	}

	.result-tag {
		font-size: 0.75rem;
		color: rgb(100, 116, 139);
	}

	/* Loading & Empty States */
	.search-loading {
		padding: 3rem 2rem;
		text-align: center;
		color: rgb(148, 163, 184);
		font-size: 0.875rem;
	}

	.no-results {
		padding: 3rem 2rem;
		text-align: center;
	}

	.no-results-icon {
		color: rgb(203, 213, 225);
		margin-bottom: 1rem;
	}

	.no-results-title {
		font-size: 1rem;
		font-weight: 600;
		color: rgb(var(--black));
		margin: 0 0 0.5rem 0;
	}

	.no-results-text {
		font-size: 0.875rem;
		color: rgb(100, 116, 139);
		margin: 0;
	}

	/* Responsive */
	@media (max-width: 768px) {
		.inline-search-input {
			padding: 0.875rem 3rem 0.875rem 3rem;
			font-size: 0.9375rem;
		}

		.search-icon {
			left: 1rem;
		}

		.clear-button {
			right: 0.875rem;
		}

		.quick-filters {
			gap: 0.375rem;
		}

		.filter-chip {
			padding: 0.375rem 0.75rem;
			font-size: 0.8125rem;
		}

		.search-results-dropdown {
			max-height: 60vh;
		}

		.search-result-item {
			padding: 0.875rem 1rem;
		}
	}
</style>
