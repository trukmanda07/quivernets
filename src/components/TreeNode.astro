---
/**
 * TreeNode Component
 * Recursive component for rendering tree structure with collapse/expand
 */

import type { TreeNode } from '../utils/explorerTree';

interface Props {
	node: TreeNode;
	level?: number;
}

const { node, level = 0 } = Astro.props;
const hasChildren = node.children && node.children.length > 0;
---

<div class="tree-node" data-level={level}>
	{hasChildren ? (
		<!-- Folder node with children -->
		<div class="tree-node-folder">
			<button
				class="tree-node-toggle"
				data-node-id={node.id}
				aria-expanded="false"
				aria-label={`Toggle ${node.label}`}
			>
				<svg class="icon icon-chevron" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<polyline points="9 18 15 12 9 6"></polyline>
				</svg>
				<svg class="icon icon-folder" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
				</svg>
				<span class="tree-node-label">{node.label}</span>
			</button>
			<div class="tree-node-children" data-parent-id={node.id} hidden>
				{node.children?.map(child => (
					<Astro.self node={child} level={level + 1} />
				))}
			</div>
		</div>
	) : (
		<!-- File node without children -->
		<a
			href={node.href}
			class="tree-node-file"
			data-slug={node.slug}
		>
			<svg class="icon icon-file" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
				<polyline points="14 2 14 8 20 8"></polyline>
			</svg>
			<span class="tree-node-label">{node.label}</span>
		</a>
	)}
</div>

<style>
	.tree-node {
		width: 100%;
	}

	.tree-node-folder {
		width: 100%;
	}

	.tree-node-toggle {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		width: 100%;
		padding: 0.5rem;
		padding-left: calc(0.5rem + var(--level, 0) * 1rem);
		background: none;
		border: none;
		cursor: pointer;
		color: rgb(var(--gray-dark));
		font-size: 0.875rem;
		text-align: left;
		border-radius: 4px;
		transition: all 0.2s ease;
	}

	.tree-node-toggle:hover {
		background: rgba(0, 0, 0, 0.05);
		color: rgb(var(--accent));
	}

	.tree-node-toggle[aria-expanded="true"] .icon-chevron {
		transform: rotate(90deg);
	}

	.tree-node-file {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		width: 100%;
		padding: 0.5rem;
		padding-left: calc(0.5rem + var(--level, 0) * 1rem);
		color: rgb(var(--gray-dark));
		text-decoration: none;
		font-size: 0.875rem;
		border-radius: 4px;
		transition: all 0.2s ease;
	}

	.tree-node-file:hover {
		background: rgba(0, 0, 0, 0.05);
		color: rgb(var(--accent));
	}

	.tree-node-file.active {
		background: rgb(var(--accent));
		color: white;
		font-weight: 600;
	}

	.icon {
		flex-shrink: 0;
		transition: transform 0.2s ease;
	}

	.icon-chevron {
		width: 14px;
		height: 14px;
	}

	.icon-folder,
	.icon-file {
		width: 16px;
		height: 16px;
	}

	.tree-node-label {
		flex: 1;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.tree-node-children {
		width: 100%;
		overflow: hidden;
		transition: all 0.3s ease;
	}

	.tree-node-children[hidden] {
		display: none;
	}

	/* Set CSS custom property for indentation */
	.tree-node[data-level="0"] {
		--level: 0;
	}

	.tree-node[data-level="1"] {
		--level: 1;
	}

	.tree-node[data-level="2"] {
		--level: 2;
	}

	.tree-node[data-level="3"] {
		--level: 3;
	}

	.tree-node[data-level="4"] {
		--level: 4;
	}
</style>
