---
// Generic Presentation Renderer Component
// Works with any presentation data from collections

import { addLanguagePrefix } from '../utils/i18n';

interface Slide {
  title: string;
  time: string;
  content: string;
}

interface Props {
  slides: Slide[];
  title: string;
  totalSlides?: number;
  relatedBlogPost?: string;
  language?: string;
  displayMode?: 'fullscreen' | 'instagram';
  slug?: string; // For progress tracking
}

const {
  slides,
  title,
  totalSlides = slides.length,
  relatedBlogPost,
  language = 'en',
  displayMode = 'instagram',
  slug = ''
} = Astro.props;
---

<div class={`presentation-container ${displayMode}`}>
  <!-- Header with Navigation -->
  <div class="header bg-white text-gray-800 p-3 shadow-md">
    <div class="flex justify-center items-center gap-4 flex-wrap">
      <!-- Navigation Links -->
      <nav class="flex items-center gap-4 text-sm">
        <a href={addLanguagePrefix('/', language)} class="hover:text-blue-600 transition-colors">Home</a>
        <a href={addLanguagePrefix('/blog', language)} class="hover:text-blue-600 transition-colors">Blog</a>
        <a href={addLanguagePrefix('/presentations', language)} class="hover:text-blue-600 transition-colors">Presentations</a>
        <a href={addLanguagePrefix('/about', language)} class="hover:text-blue-600 transition-colors">About</a>
      </nav>

      <span class="text-gray-400">|</span>
      <span class="text-sm font-semibold text-gray-700">{title}</span>
      <span class="text-gray-400">|</span>

      <!-- Actions -->
      <div class="flex items-center gap-3">
      {relatedBlogPost && (
        <a
          href={`/${language}/blog/${relatedBlogPost}`}
          class="text-sm bg-green-600 hover:bg-green-700 px-3 py-1 rounded transition-colors flex items-center gap-1"
          title="Read as blog post"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          <span class="hidden md:inline">Read Blog</span>
        </a>
      )}
      <div class="relative share-menu-container">
        <button
          id="share-btn"
          class="text-sm bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded transition-colors flex items-center gap-1"
          title="Share this slide"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
          </svg>
          <span class="hidden md:inline">Share</span>
        </button>

        <!-- Share Dropdown Menu -->
        <div id="share-menu" class="share-menu hidden absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
          <div class="p-2">
            <button id="share-copy" class="share-menu-item w-full text-left px-4 py-2 hover:bg-gray-100 rounded flex items-center gap-3">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
              <span class="text-sm font-medium">Copy Link</span>
            </button>

            <button id="share-twitter" class="share-menu-item w-full text-left px-4 py-2 hover:bg-gray-100 rounded flex items-center gap-3">
              <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
              <span class="text-sm font-medium">Share on X/Twitter</span>
            </button>

            <button id="share-facebook" class="share-menu-item w-full text-left px-4 py-2 hover:bg-gray-100 rounded flex items-center gap-3">
              <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
              <span class="text-sm font-medium">Share on Facebook</span>
            </button>

            <button id="share-linkedin" class="share-menu-item w-full text-left px-4 py-2 hover:bg-gray-100 rounded flex items-center gap-3">
              <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
              <span class="text-sm font-medium">Share on LinkedIn</span>
            </button>

            <button id="share-whatsapp" class="share-menu-item w-full text-left px-4 py-2 hover:bg-gray-100 rounded flex items-center gap-3">
              <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
              </svg>
              <span class="text-sm font-medium">Share on WhatsApp</span>
            </button>
          </div>
        </div>
      </div>
      </div>

      <span class="text-gray-400">|</span>

      <div class="text-sm text-gray-600">
        Slide <span id="current-slide-num">1</span> of {totalSlides}
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="slide-wrapper" id="slide-capture-area">
      <div class="flex justify-between items-center mb-8 border-b pb-4">
        <h2 id="slide-title" class="text-2xl font-bold text-gray-700">{slides[0].title}</h2>
        <span id="slide-time" class="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
          {slides[0].time}
        </span>
      </div>
      <div id="slide-content" class="slide-content-container" set:html={slides[0].content}></div>
    </div>
  </div>

  <!-- Footer Navigation -->
  <div class="footer-nav bg-white border-t border-gray-200 p-4 shadow-lg">
    <div class="max-w-6xl mx-auto flex justify-between items-center">
      <button
        id="prev-btn"
        class="flex items-center gap-2 bg-blue-500 text-white px-6 py-2 rounded-lg disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed hover:bg-blue-600 transition"
        disabled
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
        Previous
      </button>

      <div class="flex gap-2" id="slide-dots">
        {slides.map((_, idx) => (
          <button
            class={`slide-dot w-3 h-3 rounded-full transition ${idx === 0 ? 'bg-blue-500' : 'bg-gray-300'}`}
            data-slide={idx}
          />
        ))}
      </div>

      <button
        id="next-btn"
        class="flex items-center gap-2 bg-blue-500 text-white px-6 py-2 rounded-lg disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed hover:bg-blue-600 transition"
      >
        Next
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<script define:vars={{ slides, slug }}>
  // ===== PROGRESS TRACKING UTILITIES (Inlined) =====
  const STORAGE_KEY = 'presentationProgress';

  function loadProgress(presentationSlug) {
    if (typeof localStorage === 'undefined' || !presentationSlug) return null;
    try {
      const data = localStorage.getItem(STORAGE_KEY);
      const allProgress = data ? JSON.parse(data) : {};
      return allProgress[presentationSlug] || null;
    } catch (error) {
      console.error('Error loading progress:', error);
      return null;
    }
  }

  function saveProgress(presentationSlug, slideIndex, totalSlides) {
    if (typeof localStorage === 'undefined' || !presentationSlug) return;
    try {
      const data = localStorage.getItem(STORAGE_KEY);
      const allProgress = data ? JSON.parse(data) : {};
      const isLastSlide = slideIndex === totalSlides - 1;

      allProgress[presentationSlug] = {
        currentSlide: slideIndex,
        totalSlides,
        lastVisited: new Date().toISOString(),
        completed: isLastSlide,
      };

      localStorage.setItem(STORAGE_KEY, JSON.stringify(allProgress));
    } catch (error) {
      console.error('Error saving progress:', error);
    }
  }

  // ===== PRESENTATION STATE MANAGEMENT =====
  let currentSlide = 0;

  // Get DOM elements
  const slideTitle = document.getElementById('slide-title');
  const slideTime = document.getElementById('slide-time');
  const slideContent = document.getElementById('slide-content');
  const currentSlideNum = document.getElementById('current-slide-num');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const slideDots = document.querySelectorAll('.slide-dot');
  const shareBtn = document.getElementById('share-btn');
  const shareMenu = document.getElementById('share-menu');
  const shareCopyBtn = document.getElementById('share-copy');
  const shareTwitterBtn = document.getElementById('share-twitter');
  const shareFacebookBtn = document.getElementById('share-facebook');
  const shareLinkedInBtn = document.getElementById('share-linkedin');
  const shareWhatsAppBtn = document.getElementById('share-whatsapp');

  // Load saved progress on init
  function initializeProgress() {
    if (slug) {
      const progress = loadProgress(slug);
      if (progress && progress.currentSlide > 0 && !progress.completed) {
        // Auto-resume from saved position
        currentSlide = progress.currentSlide;
        console.log(`📖 Resuming from slide ${currentSlide + 1} of ${slides.length}`);
      }
    }
  }

  // Update slide display
  function updateSlide(index) {
    const slide = slides[index];
    slideTitle.textContent = slide.title;
    slideTime.textContent = slide.time;
    slideContent.innerHTML = slide.content;
    currentSlideNum.textContent = (index + 1).toString();

    // Render KaTeX math
    renderKaTeX();

    // Update buttons
    prevBtn.disabled = index === 0;
    nextBtn.disabled = index === slides.length - 1;

    // Update dots
    slideDots.forEach((dot, idx) => {
      if (idx === index) {
        dot.classList.remove('bg-gray-300');
        dot.classList.add('bg-blue-500');
      } else {
        dot.classList.remove('bg-blue-500');
        dot.classList.add('bg-gray-300');
      }
    });

    // Save progress
    if (slug) {
      saveProgress(slug, index, slides.length);

      // Show completion message on last slide
      if (index === slides.length - 1) {
        console.log('🎉 Presentation completed!');
      }
    }
  }

  // Render KaTeX for math expressions
  function renderKaTeX() {
    if (typeof renderMathInElement !== 'undefined') {
      renderMathInElement(slideContent, {
        delimiters: [
          {left: '$$', right: '$$', display: true},
          {left: '$', right: '$', display: false},
        ],
        throwOnError: false
      });
    }
  }

  // Navigation functions
  function nextSlide() {
    if (currentSlide < slides.length - 1) {
      currentSlide++;
      updateSlide(currentSlide);
    }
  }

  function prevSlide() {
    if (currentSlide > 0) {
      currentSlide--;
      updateSlide(currentSlide);
    }
  }

  function goToSlide(index, updateHash = true) {
    if (index >= 0 && index < slides.length) {
      currentSlide = index;
      updateSlide(currentSlide);

      // Update URL hash for sharing (if updateHash is true)
      if (updateHash) {
        window.location.hash = `slide-${index + 1}`;
      }
    }
  }

  // ===== HASH NAVIGATION (Deep Linking) =====
  function loadSlideFromHash() {
    const hash = window.location.hash;
    if (hash.startsWith('#slide-')) {
      const slideNum = parseInt(hash.replace('#slide-', ''), 10);
      if (!isNaN(slideNum) && slideNum >= 1 && slideNum <= slides.length) {
        return slideNum - 1; // Convert to 0-based index
      }
    }
    return null;
  }

  // Handle hash changes (back/forward navigation)
  window.addEventListener('hashchange', () => {
    const slideIndex = loadSlideFromHash();
    if (slideIndex !== null) {
      goToSlide(slideIndex, false); // Don't update hash again
    }
  });

  // ===== SHARE FUNCTIONALITY =====
  function getCurrentShareUrl() {
    const slideNum = currentSlide + 1;
    return window.location.origin + window.location.pathname + `#slide-${slideNum}`;
  }

  function getCurrentShareText() {
    const slide = slides[currentSlide];
    const slideNum = currentSlide + 1;
    return {
      title: `${slide.title} - Slide ${slideNum}`,
      text: `Check out this slide: ${slide.title}`,
      url: getCurrentShareUrl()
    };
  }

  function toggleShareMenu() {
    shareMenu.classList.toggle('hidden');
  }

  function closeShareMenu() {
    shareMenu.classList.add('hidden');
  }

  function copyLinkToClipboard() {
    const url = getCurrentShareUrl();
    navigator.clipboard.writeText(url).then(() => {
      showNotification('✅ Link copied to clipboard!');
      closeShareMenu();
    }).catch((err) => {
      console.error('Failed to copy:', err);
      showNotification('❌ Failed to copy link');
    });
  }

  function shareToTwitter() {
    const share = getCurrentShareText();
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(share.text)}&url=${encodeURIComponent(share.url)}`;
    window.open(twitterUrl, '_blank', 'width=550,height=420');
    closeShareMenu();
  }

  function shareToFacebook() {
    const url = getCurrentShareUrl();
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
    window.open(facebookUrl, '_blank', 'width=550,height=420');
    closeShareMenu();
  }

  function shareToLinkedIn() {
    const url = getCurrentShareUrl();
    const linkedInUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
    window.open(linkedInUrl, '_blank', 'width=550,height=420');
    closeShareMenu();
  }

  function shareToWhatsApp() {
    const share = getCurrentShareText();
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(share.text + ' ' + share.url)}`;
    window.open(whatsappUrl, '_blank');
    closeShareMenu();
  }

  function showNotification(message) {
    // Simple notification
    const notification = document.createElement('div');
    notification.className = 'fixed top-20 right-4 bg-gray-800 text-white px-4 py-2 rounded shadow-lg z-50 animate-fade-in';
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.add('animate-fade-out');
      setTimeout(() => notification.remove(), 300);
    }, 2000);
  }

  // Close share menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.share-menu-container')) {
      closeShareMenu();
    }
  });

  // Event listeners
  prevBtn.addEventListener('click', prevSlide);
  nextBtn.addEventListener('click', nextSlide);
  shareBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleShareMenu();
  });
  shareCopyBtn.addEventListener('click', copyLinkToClipboard);
  shareTwitterBtn.addEventListener('click', shareToTwitter);
  shareFacebookBtn.addEventListener('click', shareToFacebook);
  shareLinkedInBtn.addEventListener('click', shareToLinkedIn);
  shareWhatsAppBtn.addEventListener('click', shareToWhatsApp);

  slideDots.forEach((dot, idx) => {
    dot.addEventListener('click', () => goToSlide(idx));
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      prevSlide();
    } else if (e.key === 'ArrowRight') {
      nextSlide();
    } else if (e.key === 'Home') {
      goToSlide(0);
    } else if (e.key === 'End') {
      goToSlide(slides.length - 1);
    }
  });

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Priority 1: Check for URL hash (deep link)
    const hashSlideIndex = loadSlideFromHash();
    if (hashSlideIndex !== null) {
      currentSlide = hashSlideIndex;
      console.log(`🔗 Deep link: Opening slide ${currentSlide + 1}`);
      updateSlide(currentSlide);
      return; // Skip progress loading if hash is present
    }

    // Priority 2: Load saved progress and resume if applicable
    initializeProgress();

    // Update slide display (will use currentSlide set by initializeProgress)
    if (currentSlide > 0) {
      updateSlide(currentSlide);
    } else {
      renderKaTeX();
    }
  });
</script>

<style>
  .presentation-container {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* ===== FULLSCREEN MODE (Default) ===== */
  .presentation-container.fullscreen {
    width: 100%;
    min-height: 100vh;
    background: #f3f4f6;
    display: flex;
    flex-direction: column;
  }

  .presentation-container.fullscreen .main-content {
    flex: 1;
    overflow: auto;
    padding: 2rem;
  }

  .presentation-container.fullscreen .slide-wrapper {
    max-width: 72rem;
    margin: 0 auto;
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    padding: 3rem;
    min-height: 600px;
  }

  /* ===== INSTAGRAM MODE (1080x1080px) ===== */
  .presentation-container.instagram {
    min-height: 100vh;
    background: #e5e7eb;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem 0;
  }

  .presentation-container.instagram .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    opacity: 0.95;
    z-index: 10;
  }

  .presentation-container.instagram .footer-nav {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    opacity: 0.95;
    z-index: 10;
  }

  .presentation-container.instagram .main-content {
    flex: 0 0 auto;
    padding: 0;
    overflow: visible;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .presentation-container.instagram .slide-wrapper {
    width: 1080px;
    height: 1080px;
    max-width: 1080px;
    max-height: 1080px;
    margin: 0;
    background: white;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.3);
    border-radius: 0;
    padding: 3rem;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  /* Responsive Instagram mode for mobile/tablet */
  @media (max-width: 1200px) {
    .presentation-container.instagram .slide-wrapper {
      width: min(1080px, 90vw);
      height: min(1080px, 90vw);
      max-width: 90vw;
      max-height: 90vw;
      padding: 2rem;
    }
  }

  @media (max-width: 640px) {
    .presentation-container.instagram .slide-wrapper {
      width: 95vw;
      height: 95vw;
      max-width: 95vw;
      max-height: 95vw;
      padding: 1.5rem;
    }

    .presentation-container.instagram .slide-wrapper {
      font-size: 0.875rem;
    }
  }

  /* ===== COMMON STYLES ===== */
  /* Smooth transitions for slide content */
  #slide-content {
    animation: fadeIn 0.3s ease-in;
  }

  /* Add proper spacing and max-width to slide content */
  .slide-content-container {
    max-width: 100%;
    padding: 1rem 0;
  }

  /* Ensure slide content has proper spacing */
  .slide-content-container > * {
    margin-bottom: 1rem;
  }

  .slide-content-container > *:last-child {
    margin-bottom: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Ensure buttons are accessible */
  button:focus-visible {
    outline: 2px solid #60a5fa;
    outline-offset: 2px;
  }

  /* Notification animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateX(100px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(100px);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.3s ease-out;
  }

  .animate-fade-out {
    animation: fadeOut 0.3s ease-in;
  }
</style>
