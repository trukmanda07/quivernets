---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import FormattedDate from './FormattedDate.astro';
import Tag from './Tag.astro';
import { getCollectionName, useTranslations, type Language } from '../utils/i18n';

interface Props {
	currentPostId: string;
	tags?: string[];
	category?: string;
	language: Language;
	translationId?: string;
	translatedVersions?: {
		en?: string;
		id?: string;
	};
	maxRelated?: number;
}

const {
	currentPostId,
	tags = [],
	category,
	language,
	translationId,
	translatedVersions,
	maxRelated = 3
} = Astro.props;

const t = useTranslations(language);
const otherLang = language === 'en' ? 'id' : 'en';

// Get posts from current language
const collectionName = getCollectionName(language);
let allPosts = [];
try {
	allPosts = await getCollection(collectionName);
} catch (error) {
	console.error(`Error loading collection ${collectionName}:`, error);
}

// Filter out current post
const otherPosts = allPosts.filter(post => post.id !== currentPostId);

// Calculate relevance score for each post
const scoredPosts = otherPosts.map(post => {
	let score = 0;

	// Score based on shared tags (highest priority)
	const sharedTags = tags.filter(tag => post.data.tags?.includes(tag));
	score += sharedTags.length * 3;

	// Score based on same category
	if (category && post.data.category === category) {
		score += 2;
	}

	// Slight bonus for same difficulty level
	if (post.data.difficulty === Astro.props.difficulty) {
		score += 1;
	}

	return { post, score };
});

// Sort by score and take top N
const relatedPosts = scoredPosts
	.filter(item => item.score > 0)
	.sort((a, b) => b.score - a.score)
	.slice(0, maxRelated)
	.map(item => item.post);

// Check if translation exists in other language
let translationPost = null;
if (translatedVersions) {
	const translationSlug = translatedVersions[otherLang];
	if (translationSlug) {
		try {
			const otherCollectionName = getCollectionName(otherLang);
			const otherLangPosts = await getCollection(otherCollectionName);
			translationPost = otherLangPosts.find(p => p.id === translationSlug);
		} catch (error) {
			console.error(`Error finding translation:`, error);
		}
	}
}
---

{(relatedPosts.length > 0 || translationPost) && (
	<div class="related-posts-container">
		{/* Translation Notice */}
		{translationPost && (
			<div class="translation-notice">
				<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<circle cx="12" cy="12" r="10"></circle>
					<path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
					<path d="M2 12h20"></path>
				</svg>
				<span>
					{t.language.availableIn} <strong>{otherLang === 'en' ? 'English' : 'Bahasa Indonesia'}</strong>
				</span>
				<a href={`/${otherLang}/blog/${translationPost.id}`} class="translation-link">
					{otherLang === 'en' ? 'Read in English' : 'Baca dalam Bahasa Indonesia'} â†’
				</a>
			</div>
		)}

		{/* Related Posts Section */}
		{relatedPosts.length > 0 && (
			<div class="related-posts">
				<h2 class="related-title">{t.post.relatedPosts}</h2>
				<div class="related-grid">
					{relatedPosts.map((post) => (
						<article class="related-card">
							<a href={`/${language}/blog/${post.id}`}>
								{post.data.heroImage && (
									<div class="related-image">
										<Image
											src={post.data.heroImage}
											alt={post.data.title}
											width={400}
											height={200}
										/>
									</div>
								)}
								<div class="related-content">
									<h3 class="related-post-title">{post.data.title}</h3>
									<p class="related-description">{post.data.description}</p>

									{/* Meta info */}
									<div class="related-meta">
										<span class="related-date">
											<FormattedDate date={post.data.pubDate} />
										</span>
										{post.data.difficulty && (
											<span class="related-difficulty difficulty-{post.data.difficulty}">
												{t.difficulty[post.data.difficulty]}
											</span>
										)}
									</div>

									{/* Tags */}
									{post.data.tags && post.data.tags.length > 0 && (
										<div class="related-tags">
											{post.data.tags.slice(0, 3).map((tag) => (
												<Tag tag={tag} lang={language} size="sm" />
											))}
										</div>
									)}
								</div>
							</a>
						</article>
					))}
				</div>
			</div>
		)}
	</div>
)}

<style>
	.related-posts-container {
		margin-top: 4rem;
		padding-top: 2rem;
		border-top: 2px solid rgb(var(--gray-light));
	}

	/* Translation Notice Styles */
	.translation-notice {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 1rem 1.5rem;
		background: linear-gradient(135deg, rgb(var(--accent-light)) 0%, rgb(var(--accent)) 100%);
		border-radius: 12px;
		margin-bottom: 2rem;
		color: white;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.translation-notice svg {
		flex-shrink: 0;
	}

	.translation-notice span {
		flex: 1;
		font-size: 0.95rem;
	}

	.translation-link {
		padding: 0.5rem 1rem;
		background: white;
		color: rgb(var(--accent));
		border-radius: 6px;
		font-weight: 600;
		font-size: 0.875rem;
		text-decoration: none;
		transition: all 0.2s ease;
		white-space: nowrap;
	}

	.translation-link:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
	}

	/* Related Posts Styles */
	.related-posts {
		width: 100%;
	}

	.related-title {
		font-size: 1.75rem;
		font-weight: 700;
		margin-bottom: 1.5rem;
		color: rgb(var(--gray-dark));
	}

	.related-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 1.5rem;
	}

	.related-card {
		background: white;
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		transition: all 0.3s ease;
		height: 100%;
	}

	.related-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
	}

	.related-card a {
		display: flex;
		flex-direction: column;
		height: 100%;
		text-decoration: none;
		color: inherit;
	}

	.related-image {
		width: 100%;
		height: 160px;
		overflow: hidden;
		background: rgb(var(--gray-light));
	}

	.related-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.related-card:hover .related-image img {
		transform: scale(1.05);
	}

	.related-content {
		padding: 1.25rem;
		flex: 1;
		display: flex;
		flex-direction: column;
	}

	.related-post-title {
		font-size: 1.1rem;
		font-weight: 600;
		margin: 0 0 0.5rem 0;
		color: rgb(var(--black));
		line-height: 1.3;
		transition: color 0.2s ease;
	}

	.related-card:hover .related-post-title {
		color: rgb(var(--accent));
	}

	.related-description {
		font-size: 0.875rem;
		color: rgb(var(--gray-dark));
		margin: 0 0 1rem 0;
		line-height: 1.5;
		flex: 1;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.related-meta {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 0.75rem;
		font-size: 0.8rem;
	}

	.related-date {
		color: rgb(var(--gray));
	}

	.related-difficulty {
		padding: 0.25rem 0.5rem;
		border-radius: 4px;
		font-weight: 500;
		font-size: 0.75rem;
		text-transform: capitalize;
	}

	.difficulty-beginner {
		background: rgb(134, 239, 172);
		color: rgb(22, 101, 52);
	}

	.difficulty-intermediate {
		background: rgb(253, 224, 71);
		color: rgb(113, 63, 18);
	}

	.difficulty-advanced {
		background: rgb(252, 165, 165);
		color: rgb(127, 29, 29);
	}

	.related-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.375rem;
		margin-top: auto;
	}

	/* Mobile responsive */
	@media (max-width: 768px) {
		.related-posts-container {
			margin-top: 3rem;
		}

		.translation-notice {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.5rem;
			padding: 1rem;
		}

		.translation-link {
			width: 100%;
			text-align: center;
		}

		.related-title {
			font-size: 1.5rem;
		}

		.related-grid {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.related-image {
			height: 180px;
		}
	}

	@media (max-width: 480px) {
		.related-posts-container {
			margin-top: 2rem;
			padding-top: 1.5rem;
		}

		.related-title {
			font-size: 1.25rem;
			margin-bottom: 1rem;
		}

		.related-content {
			padding: 1rem;
		}

		.related-post-title {
			font-size: 1rem;
		}
	}
</style>
